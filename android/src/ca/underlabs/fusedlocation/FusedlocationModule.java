/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ca.underlabs.fusedlocation;

import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.os.Bundle;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;

@Kroll.module(name="FusedlocationModule", id="ca.underlabs.fusedlocation")
public class FusedlocationModule extends KrollModule implements LocationListener, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {
	
	private KrollFunction geoLocationSuccessCallback;
    private KrollFunction geoLocationErrorCallback;
    private String lastLatitude = "";
    private String lastLongitude = "";
    private String lastAccuracy = "";
    private final int PRIORITY = 100;
    private final long POLLING_FREQ = 3000;
    private final long FASTEST_UPDATE_FREQ = 16;
    
    Context ctx = TiApplication.getAppCurrentActivity().getApplicationContext();
    
    private LocationRequest locationRequest;
    private GoogleApiClient googleApiClient;
    
    private static final String LCAT = "FusedLocation";

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        Log.d(LCAT, "inside onAppCreate");
    }

    public void onStart(Activity activity) {
        Log.d(LCAT, "onStart");
        super.onStart(activity);
    }

    public void onStop(Activity activity) {
        Log.d(LCAT, "onStop");
        super.onStop(activity);
    }

    public void onConnected(Bundle bundle) {
        Log.d(LCAT, "onConnected");
        LocationServices.FusedLocationApi.requestLocationUpdates(googleApiClient, locationRequest, (LocationListener)this);
    }

    public void onConnectionSuspended(int i) {
        Log.d(LCAT, "onConnectionSuspended");
    }

    public void onLocationChanged(Location location) {
        if (location != null) {
            Boolean execCallback = false;
            String latitude = String.valueOf(location.getLatitude());
            String longitude = String.valueOf(location.getLongitude());
            String accuracy = String.valueOf(location.getAccuracy());
            String provider = String.valueOf(location.getProvider());
            String bearing = String.valueOf(location.getBearing());
            String speed = String.valueOf(location.getSpeed());
            String timestamp = String.valueOf(location.getTime());
            if (!this.lastLatitude.equals(latitude)) {
                this.lastLatitude = latitude;
                execCallback = true;
            }
            if (!this.lastLongitude.equals(longitude)) {
                this.lastLongitude = longitude;
                execCallback = true;
            }
            if (!this.lastAccuracy.equals(accuracy)) {
                this.lastAccuracy = accuracy;
                execCallback = true;
            }
            if (execCallback.booleanValue()) {
                HashMap<String, String> event = new HashMap<String, String>();
                event.put("latitude", latitude);
                event.put("longitude", longitude);
                event.put("accuracy", accuracy);
                event.put("provider", provider);
                event.put("bearing", bearing);
                event.put("speed", speed);
                event.put("timestamp", timestamp);
                this.geoLocationSuccessCallback.call(this.getKrollObject(), event);
            }
        }
    }

    public void onConnectionFailed(ConnectionResult connectionResult) {
        Log.d(LCAT, "onConnectionFailed");
        HashMap<String, String> event = new HashMap<String, String>();
        event.put("message", "onConnectionFailed");
        event.put("connectionResult", String.valueOf((Object)connectionResult));
        this.geoLocationErrorCallback.call(this.getKrollObject(), event);
    }

    private void buildClient() {
    		ctx = TiApplication.getAppRootOrCurrentActivity().getApplicationContext();
        Log.d(LCAT, "buildClient");
        locationRequest = LocationRequest.create();
        locationRequest.setPriority(PRIORITY);
        locationRequest.setInterval(POLLING_FREQ);
        locationRequest.setFastestInterval(FASTEST_UPDATE_FREQ);
        Activity activity = TiApplication.getAppCurrentActivity();
        GoogleApiClient.Builder builder = new GoogleApiClient.Builder((Context)activity).addApi(LocationServices.API).addConnectionCallbacks((GoogleApiClient.ConnectionCallbacks)this).addOnConnectionFailedListener((GoogleApiClient.OnConnectionFailedListener)this);
        googleApiClient = builder.build();
    }

    @Kroll.method
    public void startGeoLocation(KrollDict props) {
        Log.d(LCAT, "startGeoLocation");
        
        if (props.containsKey((Object)"success")) {
            this.geoLocationSuccessCallback = (KrollFunction)props.get((Object)"success");
        }
        if (props.containsKey((Object)"error")) {
            this.geoLocationErrorCallback = (KrollFunction)props.get((Object)"error");
        }
        if (googleApiClient == null) {
            this.buildClient();
        } else {
            Log.d(LCAT, "GoogleApiClient available");
        }
        if (!googleApiClient.isConnected()) {
            Log.d(LCAT, "GoogleApiClient.connect");
            googleApiClient.connect();
        } else {
            Log.d(LCAT, "GoogleApiClient.isConnected");
        }
    }

    @Kroll.method
    public void stopGeoLocation() {
        Log.d(LCAT, "stopGeoLocation");
        if (googleApiClient != null && googleApiClient.isConnected()) {
            LocationServices.FusedLocationApi.removeLocationUpdates(googleApiClient, (LocationListener)this);
            googleApiClient.disconnect();
        }
    }
    
}